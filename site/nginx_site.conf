# pencilcode_nginx.conf

upstream load_py {
  server unix:///run/uwsgi/app/load/socket;
}

upstream save_py {
  server unix:///run/uwsgi/app/save/socket;
}

upstream img_py {
  server unix:///run/uwsgi/app/img/socket;
}

upstream goto_py {
  server unix:///run/uwsgi/app/goto/socket;
}

log_format subdomain '$remote_addr $owner $uid_got [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent"';

log_format offdomain '$remote_addr $host $uid_got [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent"';
types {
  text/coffeescript	coffee;
  text/coffeescript	cs;
}

# configuration of the top-level server
server {
  listen          80;
  listen          443 ssl;
  ssl_certificate /srv/pencilcode.net/key/pencilcode.crt;
  ssl_certificate_key /srv/pencilcode.net/key/pencilcode.key;
  ssl_dhparam /srv/pencilcode.net/key/dh2048.pem;
  ssl_session_timeout 5m;
  ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:50m;
  # enable ocsp stapling
  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 10s;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /srv/pencilcode.net/key/bundle.crt;
  server_name     ~^(?<site>pencilcode\.net|pencilcode\.org)$;
  charset         utf-8;
  client_max_body_size 1M;
  gzip on;
  gzip_types      text/javascript text/css application/x-javascript;
  root            /srv/$site;
  add_header      Access-Control-Allow-Origin *;
  add_header      X-XSS-Protection 0;
  userid          on;
  userid_name     uid;
  userid_domain   pencilcode.net;
  userid_path     /;
  userid_expires  max;
  set             $owner -;
  access_log      /var/log/nginx/access.log subdomain;

  location ^~ /save/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  save_py;
    include     uwsgi_params;
  }

  location ^~ /load/ {
    uwsgi_pass  load_py;
    include     uwsgi_params;
  }

  location ^~ /img/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  img_py;
    include     uwsgi_params;
  }

  location ^~ /goto/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  goto_py;
    include     uwsgi_params;
  }

  location ^~ /edit/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    try_files /top/editor.html =404;
  }

  location ^~ /log/ {
    return 204;
  }

  location = / {
    try_files /top/welcome.html =404;
  }

  location @root_redirect {
    return 302 /;
  }

  location = /status {
    stub_status on;
    access_log off;
  }

  location = /group {
    return 302 http://groups.google.com/d/forum/pencilcode;
  }

  location = /book {
    return 302 http://www.amazon.com/Pencil-Code-A-Programming-Primer/dp/149434744X?tag=dqsd-20;
  }

  location = /wish {
    return 302 http://davidbau.com/archives/2013/11/28/a_new_book_and_a_thanksgiving_wish.html;
  }

  location / {
    root /srv/$site/top;
    try_files $uri @root_redirect;
  }

  # To allow cross-domain image manipulation, pencilcode will proxy
  # /proxy/URL requests (as long as the  referer is also pencilcode.)
  location ~ ^/proxy/(?:(?P<proxy_prot>https?)://?)?(?P<proxy_uri>[^/]+\.[a-z]+(?::\d+)?/.*)$ {
    #valid_referers pencilcode.net *.pencilcode.net
    #               pencilcode.org *.pencilcode.org;
    #               pencilcode.net.dev *.pencilcode.net.dev;
    #if ($invalid_referer) {
    #  return 403;
    #}
    if ($proxy_prot = "") {
      set $proxy_prot http;
    }
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Access-Control-Allow-Origin *;
    add_header X-XSS-Protection 0;
    resolver 8.8.4.4 8.8.8.8;
    proxy_pass $proxy_prot://$proxy_uri;
  }
}

# Serve experiment directory
server {
  listen 80;
  listen 443 ssl;
  server_name experiment.pencilcode.net;
  access_log /var/log/nginx/experiment.log;
  location = /robots.txt {
    return 200 "User-agent: *\nDisallow: /\n";
  }
  location / {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor)) {
      return 403;
    }
    return 302 $scheme://pencilcode.net/;
  }
  location ~ ^/(.+?)(/.*)?$ {
    alias /home/$1/www$2;
    autoindex on;
  }
}


# Serve "gym" documentation directories
server {
  listen 80;
  listen 443 ssl;
  server_name ~^(?<site>gym|animate)\.pencilcode\.net$;
  access_log /var/log/nginx/$site.log;
  root /srv/site/$site;

  location /img/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  img_py;
    include     uwsgi_params;
  }

  location ^~ /goto/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  goto_py;
    include     uwsgi_params;
  }

}


# Redirect non-pencilcode.net domains to pencilcode.net.
server {
  listen 80;
  listen 443 ssl;
  server_name ~^(?<owner>[^.]+\.)?([^.]+\.[^.]+)(?<!pencilcode\.net)(?<!pencilcode.org)$;
  access_log /var/log/nginx/offdomain.log offdomain;
  location = /robots.txt {
    return 200 "User-agent: *\nDisallow: /\n";
  }
  location / {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor)) {
      return 403;
    }
    return 302 $scheme://${owner}pencilcode.net${request_uri};
  }
}

# Redirect developer, development.pencilcode.net to the sites
# page at dev.pencilcode.net.
server {
  listen 80;
  listen 443 ssl;
  server_name ~^develop\w*\.pencilcode\.net$;
  access_log /var/log/nginx/offdomain.log offdomain;
  return 302 $scheme://dev.pencilcode.net${request_uri};
}

# Redirect hack.pencilcode.net.
server {
  listen 80;
  listen 443 ssl;
  server_name hack.pencilcode.net;
  access_log /var/log/nginx/offdomain.log offdomain;
  return 302 $scheme://dev.pencilcode.net/hackathons;
}

# configuration of subdomain servers
server {
  listen          80;
  listen          443 ssl;
  server_name ~^(?!develop)(?<owner>[^.]+)\.(?<site>pencilcode\.net|pencilcode\.org)$;
  charset         utf-8;
  client_max_body_size 5M;
  gzip on;
  gzip_types      text/javascript text/css;
  root            /srv/$site;
  access_log      /var/log/nginx/access.log subdomain;
  add_header      Access-Control-Allow-Origin *;
  add_header      X-XSS-Protection 0;
  userid          on;
  userid_name     uid;
  userid_domain   pencilcode.net;
  userid_path     /;
  userid_expires  max;

  if ($request_uri ~* "\/\/") {
    rewrite ^/(?!proxy)(.*) $scheme://$host$uri$is_args$args permanent;
  }

  if (!-d /srv/$site/data/$owner) {
    set $action nouser;
  }

  if (-f /srv/$site/data/$owner) {
    set $action reserved;
  }

  if ($uri ~ ^/save/) {
    set $action save;
  }

  if ($owner = frame) {
    set $action frame;
  }

  if ($action = reserved) {
    return 301 http://pencilcode.net/;
  }

  if ($action = nouser) {
    return 302 http://pencilcode.net/;
  }

  set $editorfile editor;
  if ($action = frame) {
    set $editorfile framed;
  }

  location /save/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  save_py;
    include     uwsgi_params;
  }

  location /load/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  load_py;
    include     uwsgi_params;
  }

  location /img/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  img_py;
    include     uwsgi_params;
  }

  location ^~ /goto/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    uwsgi_pass  goto_py;
    include     uwsgi_params;
  }


  location /home/ {
    if ($uri !~ (?:/|\.(?:js|css|html|txt|xml|json|png|gif|jpg|jpeg|ico|bmp|pdf))$) {
      rewrite ^/home/(.*)$ /execute/$1 last;
    }
    alias /srv/$site/data/$owner/;
    index index.html /dir.html;
    error_page 404 @execute;
  }

  location /code/ {
    default_type text/plain;
    alias /srv/$site/data/$owner/;
    index index.html;
  }

  location ~ ^/download/.*(?<!/)$ {
    uwsgi_pass  load_py;
    include     uwsgi_params;
  }

  location = / {
    try_files /data/$owner/index.html @root_redirect;
  }

  location @root_redirect {
    return 302 /edit/;
  }

  location /edit/ {
    if ($http_user_agent ~ (bot|agent|spider|crawler|extractor|externalhit)) {
      return 403;
    }
    try_files /top/$editorfile.html =404;
  }

  location / {
    # Top URL is missing /home/ but points to user data.
    if (-e /srv/$site/data/$owner$uri) {
      set $toptest user;
    }
    # Top URL points to static data.
    if (-e /srv/$site/top$uri) {
      set $toptest static;
    }
    # Top URL points to special dir or editor files.
    if ($uri ~ ^/(editor|dir|framed)\.html$) {
      set $toptest special;
    }
    # Top URL points to ace files: don't redirect these.
    if ($uri ~ ^/lib/ace/) {
      set $toptest special;
    }
    # The static and user cases get redirected externally.
    if ($toptest = static) {
      return 302 http://pencilcode.net$uri;
    }
    if ($toptest = user) {
      return 302 http://$host/home$uri;
    }
    # Also missing a slash on /edit gets redirected externally.
    rewrite ^/edit$ /edit/ permanent;
    # Special cases are redirected internally.
    root /srv/$site/top;
    try_files $uri @root_redirect;
  }

  location @root_redirect {
    return 302 /edit/;
  }

  location @execute {
    uwsgi_pass  load_py;
    include     uwsgi_params;
  }

  location /execute/ {
    uwsgi_pass  load_py;
    include     uwsgi_params;
  }

  location /log/ {
    return 204;
  }

  # To allow cross-domain image manipulation, pencilcode will proxy
  # /proxy/URL requests (as long as the  referer is also pencilcode.)
  location ~ ^/proxy/(?:(?P<proxy_prot>https?)://?)?(?P<proxy_uri>[^/]+\.[a-z]+(?::\d+)?/.*)$ {
    #valid_referers pencilcode.net *.pencilcode.net
    #               pencilcode.org *.pencilcode.org;
    #               pencilcode.net.dev *.pencilcode.net.dev;
    #if ($invalid_referer) {
    #  return 403;
    #}
    if ($proxy_prot = "") {
      set $proxy_prot http;
    }
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Access-Control-Allow-Origin *;
    add_header X-XSS-Protection 0;
    resolver 8.8.4.4 8.8.8.8;
    proxy_pass $proxy_prot://$proxy_uri;
  }
}
